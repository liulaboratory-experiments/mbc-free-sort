vertex.size = 20,
edge.width = E(g)$scaled_weight,  # Use exaggerated weights only for edge width
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g)$color)
# Option 2: Rescale weights to a desired range for visual effect
E(g)$scaled_weight <- rescale(E(g)$weight, to = c(.4, 2))
# Step 4: Plot the graph with clustered layout and exaggerated edge weights
plot(g, layout = layout_clustered,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g)$scaled_weight,  # Use exaggerated weights only for edge width
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g)$color)
# Option 2: Rescale weights to a desired range for visual effect
E(g)$scaled_weight <- rescale(E(g)$weight, to = c(.4, 1))
# Step 4: Plot the graph with clustered layout and exaggerated edge weights
plot(g, layout = layout_clustered,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g)$scaled_weight,  # Use exaggerated weights only for edge width
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g)$color)
# Option 2: Rescale weights to a desired range for visual effect
E(g)$scaled_weight <- rescale(E(g)$weight, to = c(.4, 1.5))
# Step 4: Plot the graph with clustered layout and exaggerated edge weights
plot(g, layout = layout_clustered,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g)$scaled_weight,  # Use exaggerated weights only for edge width
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g)$color)
# Step 4: Plot the graph with clustered layout and exaggerated edge weights
plot(g, layout = layout_clustered,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g)$scaled_weight,  # Use exaggerated weights only for edge width
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g)$color)
ggraph(g, layout = "fr") +
geom_edge_link(aes(width = weight/100), color = "grey", alpha = 0.1) +
geom_node_point(aes(color = category), size = 5) +
geom_node_text(aes(label = name), repel = TRUE, size = 3) +
theme_void()
# Step 4: Plot the graph with clustered layout and exaggerated edge weights
plot(g, layout = layout_clustered,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g)$scaled_weight,  # Use exaggerated weights only for edge width
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g)$color)
aggregated_edges <- edge_df %>%
group_by(from, to) %>%
summarize(avg_weight = mean(weight), .groups = 'drop')  # Calculate average weight
# Step 1: Aggregate the edge weights
# Convert edges to a data frame and calculate average weight for each unique pair
edge_df <- as_data_frame(g, what = "edges")
aggregated_edges <- edge_df %>%
group_by(from, to) %>%
summarize(avg_weight = mean(weight), .groups = 'drop')  # Calculate average weight
# Step 2: Create a new graph with aggregated edges
# Use 'avg_weight' as the new weight for each edge
g_avg <- graph_from_data_frame(aggregated_edges, directed = FALSE, vertices = V(g))
edge_df
# Step 2: Create a new graph with aggregated edges
# Use 'avg_weight' as the new weight for each edge
g_avg <- graph_from_data_frame(aggregated_edges, directed = FALSE, vertices = V(g))
# Step 1: Aggregate the edge weights
edge_df <- as_data_frame(g, what = "edges")
aggregated_edges <- edge_df %>%
group_by(from, to) %>%
summarize(avg_weight = mean(weight), .groups = 'drop')  # Calculate average weight
# Step 2: Ensure all vertex names in the aggregated edges are present in the original graph
# Convert vertices to a data frame to use in graph creation
vertices_df <- as_data_frame(g, what = "vertices")
# Step 3: Create a new graph with aggregated edges and consistent vertices
g_avg <- graph_from_data_frame(aggregated_edges, directed = FALSE, vertices = vertices_df)
# Step 4: Apply a layout to the new graph
layout_avg <- layout_with_fr(g_avg)
# Step 5: Plot the simplified graph
plot(g_avg, layout = layout_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 5,  # Scale edge width by avg weight
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
# Step 5: Plot the simplified graph
plot(g_avg, layout = layout_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 1,  # Scale edge width by avg weight
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
# Step 5: Plot the simplified graph
plot(g_avg, layout = layout_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 2,  # Scale edge width by avg weight
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
# Step 5: Plot the simplified graph
plot(g_avg, layout = layout_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 2,  # Scale edge width by avg weight
vertex.label.cex = 0.7,
edge.arrow.size = 0.5,
vertex.color = V(g_avg)$color)
# Step 5: Plot the simplified graph
plot(g_avg, layout = layout_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 2,  # Scale edge width by avg weight
vertex.label.cex = 0.7,
edge.arrow.size = 1,
vertex.color = V(g_avg)$color)
# Step 1: Aggregate the edge weights for each unique node pair
edge_df <- as_data_frame(g, what = "edges")
aggregated_edges <- edge_df %>%
group_by(from, to) %>%
summarize(avg_weight = mean(weight), .groups = 'drop')  # Calculate average weight
# Step 2: Ensure vertex names match those in the original graph
vertices_df <- as_data_frame(g, what = "vertices")
# Step 3: Create a new graph with aggregated edges and consistent vertices
g_avg <- graph_from_data_frame(aggregated_edges, directed = FALSE, vertices = vertices_df)
# Step 4: Assign each node a group based on its category for clustering
V(g_avg)$group <- V(g)$group  # Use the original group assignments from `g`
# Step 5: Apply a clustered layout
layout_clustered_avg <- layout_with_fr(g_avg, niter = 1000, area = vcount(g_avg)^2, repulserad = vcount(g_avg)^3)
layout_clustered_avg <- layout.norm(layout_clustered_avg, xmin = -1, xmax = 1, ymin = -1, ymax = 1)
# Step 6: Plot the graph using the clustered layout and average weights
plot(g_avg, layout = layout_clustered_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 5,  # Scale edge width by average weight
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
# Step 5: Apply a clustered layout
layout_clustered_avg <- layout_with_fr(g_avg, niter = 1000,
area = vcount(g_avg)^4,
repulserad = vcount(g_avg)^3)
layout_clustered_avg <- layout.norm(layout_clustered_avg,
xmin = -1, xmax = 1,
ymin = -1, ymax = 1)
# Step 6: Plot the graph using the clustered layout and average weights
plot(g_avg, layout = layout_clustered_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 5,  # Scale edge width by average weight
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
# Step 5: Apply a clustered layout
layout_clustered_avg <- layout_with_fr(g_avg, niter = 1000,
area = vcount(g_avg)^3,
repulserad = vcount(g_avg)^5)
layout_clustered_avg <- layout.norm(layout_clustered_avg,
xmin = -1, xmax = 1,
ymin = -1, ymax = 1)
# Step 6: Plot the graph using the clustered layout and average weights
plot(g_avg, layout = layout_clustered_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 5,  # Scale edge width by average weight
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
# Step 1: Create a new edge attribute 'virtual_weight' only for layout
# This keeps within-category edges shorter without altering actual weights
E(g)$virtual_weight <- ifelse(
V(g)$group[ends(g, E(g))[, 1]] == V(g)$group[ends(g, E(g))[, 2]],
0.5,  # Shorter edge length for within-category connections
1     # Regular edge length for across-category connections
)
# Step 2: Generate a layout using the 'virtual_weight' attribute
layout_clustered <- layout_with_fr(g, weights = E(g)$virtual_weight, niter = 1000,
area = vcount(g)^2, repulserad = vcount(g)^3)
# Step 3: Normalize layout to fit the plot window
layout_clustered <- layout.norm(layout_clustered, xmin = -1, xmax = 1, ymin = -1, ymax = 1)
# Step 4: Plot the graph using original edge weights for visualization
plot(g, layout = layout_clustered,
vertex.label.color = "black",
vertex.size = 20,
edge.width = 1,  # Uniform edge width for simplicity
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g)$color)
# Step 1: Create a new edge attribute 'virtual_weight' only for layout
# This keeps within-category edges shorter without altering actual weights
E(g)$virtual_weight <- ifelse(
V(g)$group[ends(g, E(g))[, 1]] == V(g)$group[ends(g, E(g))[, 2]],
0.5,  # Shorter edge length for within-category connections
1     # Regular edge length for across-category connections
)
# Step 2: Generate a layout using the 'virtual_weight' attribute
layout_clustered <- layout_with_fr(g, weights = E(g)$virtual_weight, niter = 1000,
area = vcount(g)^2, repulserad = vcount(g)^3)
# Step 3: Normalize layout to fit the plot window
layout_clustered <- layout.norm(layout_clustered, xmin = -1, xmax = 1, ymin = -1, ymax = 1)
# Step 4: Plot the graph using original edge weights for visualization
plot(g, layout = layout_clustered,
vertex.label.color = "black",
vertex.size = 20,
edge.width = 1,  # Uniform edge width for simplicity
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g)$color)
# Step 1: Aggregate edge weights to get average weight for each unique node pair
edge_df <- as_data_frame(g, what = "edges")
aggregated_edges <- edge_df %>%
group_by(from, to) %>%
summarize(avg_weight = mean(weight), .groups = 'drop')  # Calculate average weight
# Step 2: Ensure vertex names match the original graph and create the new graph with averaged edges
vertices_df <- as_data_frame(g, what = "vertices")
g_avg <- graph_from_data_frame(aggregated_edges, directed = FALSE, vertices = vertices_df)
# Step 3: Assign virtual weights for layout purposes, based on categories
V(g_avg)$group <- as.numeric(as.factor(V(g)$category))  # Assign group based on category
E(g_avg)$virtual_weight <- ifelse(
V(g_avg)$group[ends(g_avg, E(g_avg))[, 1]] == V(g_avg)$group[ends(g_avg, E(g_avg))[, 2]],
0.5,  # Shorter length for within-category edges
1     # Regular length for across-category edges
)
# Step 4: Generate a layout using virtual weights (only for clustering effect)
layout_clustered_avg <- layout_with_fr(g_avg, weights = E(g_avg)$virtual_weight,
niter = 1000, area = vcount(g_avg)^2, repulserad = vcount(g_avg)^3)
layout_clustered_avg <- layout.norm(layout_clustered_avg, xmin = -1, xmax = 1, ymin = -1, ymax = 1)
# Step 5: Plot the graph using the clustered layout and averaged weights for edge width
plot(g_avg, layout = layout_clustered_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 5,  # Scale edge width by average weight
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
v
E(g_avg)$virtual_weight <- ifelse(
V(g_avg)$group[ends(g_avg, E(g_avg))[, 1]] == V(g_avg)$group[ends(g_avg, E(g_avg))[, 2]],
0.2,  # Shorter length for within-category edges
1     # Regular length for across-category edges
)
# Step 4: Generate a layout using virtual weights (only for clustering effect)
layout_clustered_avg <- layout_with_fr(g_avg, weights = E(g_avg)$virtual_weight,
niter = 1000, area = vcount(g_avg)^2, repulserad = vcount(g_avg)^3)
layout_clustered_avg <- layout.norm(layout_clustered_avg, xmin = -1, xmax = 1, ymin = -1, ymax = 1)
# Step 5: Plot the graph using the clustered layout and averaged weights for edge width
plot(g_avg, layout = layout_clustered_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 5,  # Scale edge width by average weight
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
E(g_avg)$virtual_weight <- ifelse(
V(g_avg)$group[ends(g_avg, E(g_avg))[, 1]] == V(g_avg)$group[ends(g_avg, E(g_avg))[, 2]],
0.1,  # Shorter length for within-category edges
1     # Regular length for across-category edges
)
# Step 4: Generate a layout using virtual weights (only for clustering effect)
layout_clustered_avg <- layout_with_fr(g_avg, weights = E(g_avg)$virtual_weight,
niter = 1000, area = vcount(g_avg)^2, repulserad = vcount(g_avg)^3)
layout_clustered_avg <- layout.norm(layout_clustered_avg, xmin = -1, xmax = 1, ymin = -1, ymax = 1)
# Step 5: Plot the graph using the clustered layout and averaged weights for edge width
plot(g_avg, layout = layout_clustered_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 5,  # Scale edge width by average weight
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
# Step 3: Assign virtual weights for layout purposes, based on categories
V(g_avg)$group <- as.numeric(as.factor(V(g)$category))  # Assign group based on category
E(g_avg)$virtual_weight <- ifelse(
V(g_avg)$group[ends(g_avg, E(g_avg))[, 1]] == V(g_avg)$group[ends(g_avg, E(g_avg))[, 2]],
0.1,  # Shorter length for within-category edges
2     # Regular length for across-category edges
)
# Step 4: Generate a layout using virtual weights (only for clustering effect)
layout_clustered_avg <- layout_with_fr(g_avg, weights = E(g_avg)$virtual_weight,
niter = 1000, area = vcount(g_avg)^2, repulserad = vcount(g_avg)^3)
layout_clustered_avg <- layout.norm(layout_clustered_avg, xmin = -1, xmax = 1, ymin = -1, ymax = 1)
# Step 5: Plot the graph using the clustered layout and averaged weights for edge width
plot(g_avg, layout = layout_clustered_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 5,  # Scale edge width by average weight
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
# Use Kamada-Kawai layout with virtual weights for clustering effect
layout_clustered_avg <- layout_with_kk(g_avg, weights = E(g_avg)$virtual_weight)
# Plot with the clustered layout and average edge widths
plot(g_avg, layout = layout_clustered_avg,
vertex.label.color = "black",
vertex.size = 20,
edge.width = E(g_avg)$avg_weight / 5,  # Scale edge width by average weight
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
# Aggregate connections to get the average weight for each unique pair
edge_df <- as_data_frame(g, what = "edges")
aggregated_edges <- edge_df %>%
group_by(from, to) %>%
summarize(avg_weight = mean(weight), .groups = 'drop')  # Calculate average weight
# Ensure vertex names match in the new graph
vertices_df <- as_data_frame(g, what = "vertices")
g_avg <- graph_from_data_frame(aggregated_edges, directed = FALSE, vertices = vertices_df)
# Assign group IDs to each node based on category
V(g_avg)$group <- as.numeric(as.factor(V(g)$category))
# Assign virtual weights based on within/across-category connections
E(g_avg)$virtual_weight <- ifelse(
V(g_avg)$group[ends(g_avg, E(g_avg))[, 1]] == V(g_avg)$group[ends(g_avg, E(g_avg))[, 2]],
0.5,  # Shorter virtual weight for within-category edges
1     # Normal virtual weight for across-category edges
)
# Apply Fruchterman-Reingold layout using virtual weights
layout_clustered <- layout_with_fr(g_avg, weights = E(g_avg)$virtual_weight,
niter = 1000, area = vcount(g_avg)^2, repulserad = vcount(g_avg)^3)
# Normalize layout to fit within plot window
layout_clustered <- layout.norm(layout_clustered, xmin = -1, xmax = 1, ymin = -1, ymax = 1)
# Normalize layout to fit within plot window
layout_clustered <- layout.norm(layout_clustered, xmin = -1, xmax = 1, ymin = -1, ymax = 1)
# Plot with clustered layout, using average weights for edge width and uniform edge length
plot(g_avg, layout = layout_clustered,
vertex.label.color = "black",
vertex.size = 20,
edge.width = 1,  # Use uniform width for edges
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
# Step 1: Calculate Euclidean distances for each edge based on layout coordinates
edge_lengths <- apply(ends(g_avg, E(g_avg)), 1, function(e) {
# Extract coordinates for the two nodes of each edge
from_coords <- layout_clustered[e[1], ]
to_coords <- layout_clustered[e[2], ]
# Calculate Euclidean distance between the nodes
sqrt(sum((from_coords - to_coords)^2))
})
# Step 1: Calculate Euclidean distances for each edge based on layout coordinates
edge_lengths <- apply(ends(g_avg, E(g_avg)), 1, function(e) {
# Extract coordinates for the two nodes of each edge
from_coords <- layout_clustered[e[1], ]
to_coords <- layout_clustered[e[2], ]
# Calculate Euclidean distance between the nodes
sqrt(sum((from_coords - to_coords)^2))
})
# Step 1: Calculate Euclidean distances for each edge based on layout coordinates
edge_lengths <- apply(ends(g_avg, E(g_avg)), 1, function(e) {
# Extract numeric indices for the two nodes of each edge
from_index <- as.numeric(e[1])
to_index <- as.numeric(e[2])
# Extract coordinates for the nodes
from_coords <- layout_clustered[from_index, ]
to_coords <- layout_clustered[to_index, ]
# Calculate Euclidean distance between the nodes
sqrt(sum((from_coords - to_coords)^2))
})
# Step 2: Label each edge as within-category or across-category
edge_categories <- ifelse(
V(g_avg)$group[ends(g_avg, E(g_avg))[, 1]] == V(g_avg)$group[ends(g_avg, E(g_avg))[, 2]],
"within",  # Label within-category edges
"across"   # Label across-category edges
)
# Step 3: Combine edge lengths and categories into a data frame
edge_data <- data.frame(
length = edge_lengths,
category = edge_categories
)
# Step 4: Calculate and print the average length for each category
avg_lengths <- aggregate(length ~ category, data = edge_data, mean)
#===
# Print the first few rows of the edge endpoints to verify they’re valid
print(head(ends(g_avg, E(g_avg)), 10))
# Calculate Euclidean distances for each edge based on layout coordinates and print the results
edge_lengths <- apply(ends(g_avg, E(g_avg)), 1, function(e) {
# Extract numeric indices for the two nodes of each edge
from_index <- as.numeric(e[1])
to_index <- as.numeric(e[2])
# Extract coordinates for the nodes
from_coords <- layout_clustered[from_index, ]
to_coords <- layout_clustered[to_index, ]
# Calculate Euclidean distance between the nodes
distance <- sqrt(sum((from_coords - to_coords)^2))
return(distance)
})
# Print a sample of edge lengths
print("Sample edge lengths:")
print(head(edge_lengths, 10))
print(head(layout_clustered, 10))
print(head(ends(g_avg, E(g_avg)), 10))
print(head(ends(g_avg, E(g_avg)), 10))
#===
# Step 1: Create a lookup table to map node names to their row indices in layout_clustered
name_to_index <- setNames(seq_along(V(g_avg)$name), V(g_avg)$name)
# Step 2: Calculate Euclidean distances using the name-to-index mapping
edge_lengths <- apply(ends(g_avg, E(g_avg)), 1, function(e) {
# Use the mapping to get the numeric indices for each endpoint
from_index <- name_to_index[e[1]]
to_index <- name_to_index[e[2]]
# Calculate the distance if indices are valid
if (!is.na(from_index) && !is.na(to_index)) {
from_coords <- layout_clustered[from_index, ]
to_coords <- layout_clustered[to_index, ]
sqrt(sum((from_coords - to_coords)^2))
} else {
NA  # Assign NA if any index is missing
}
})
# Step 3: Print a sample of edge lengths to confirm results
print("Sample edge lengths:")
print(head(edge_lengths, 10))
#===
# Step 1: Label each edge as within-category or across-category
edge_categories <- ifelse(
V(g_avg)$group[name_to_index[ends(g_avg, E(g_avg))[, 1]]] == V(g_avg)$group[name_to_index[ends(g_avg, E(g_avg))[, 2]]],
"within",  # Label within-category edges
"across"   # Label across-category edges
)
# Step 2: Combine edge lengths and categories into a data frame
edge_data <- data.frame(
length = edge_lengths,
category = edge_categories
)
# Step 3: Calculate and print the average length for each category
avg_lengths <- aggregate(length ~ category, data = edge_data, mean)
print("Average edge lengths by category:")
print(avg_lengths)
# Optionally, view a random sample of within-category and across-category edge lengths
sample_within <- sample(edge_data$length[edge_data$category == "within"], 10)
sample_across <- sample(edge_data$length[edge_data$category == "across"], 10)
print("Sample within-category edge lengths:")
print(sample_within)
print("Sample across-category edge lengths:")
print(sample_across)
print(avg_lengths)
print(sample_within)
print(avg_lengths)
print(sample_within)
print(sample_across)
print(sample_within)
print(sample_across)
#===
# Step 1: Assign more extreme virtual weights to amplify the clustering effect
E(g_avg)$virtual_weight <- ifelse(
V(g_avg)$group[name_to_index[ends(g_avg, E(g_avg))[, 1]]] == V(g_avg)$group[name_to_index[ends(g_avg, E(g_avg))[, 2]]],
0.1,  # Much shorter virtual weight for within-category edges
1.5   # Larger virtual weight for across-category edges
)
# Step 2: Generate a new layout with adjusted parameters to enhance clustering
layout_clustered <- layout_with_fr(g_avg, weights = E(g_avg)$virtual_weight,
niter = 1000, area = vcount(g_avg)^2 * 5, repulserad = vcount(g_avg)^4)
# Step 3: Plot the graph with the enhanced layout
plot(g_avg, layout = layout_clustered,
vertex.label.color = "black",
vertex.size = 20,
edge.width = 1,  # Keep uniform edge width for clarity
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
#==
# Define the specific pairs to check
edge_pairs <- list(
within = c("reach for something", "jump up and down"),
across = c("reach for something", "think about something")
)
# Calculate the lengths of these specific edges
edge_lengths_specific <- sapply(edge_pairs, function(pair) {
# Retrieve the indices for the two nodes
from_index <- name_to_index[pair[1]]
to_index <- name_to_index[pair[2]]
# Calculate the Euclidean distance if indices are valid
if (!is.na(from_index) && !is.na(to_index)) {
from_coords <- layout_clustered[from_index, ]
to_coords <- layout_clustered[to_index, ]
sqrt(sum((from_coords - to_coords)^2))
} else {
NA  # Return NA if any index is missing
}
})
# Print the calculated lengths for each specified edge
print("Specific edge lengths:")
print(edge_lengths_specific)
# Step 1: Create a copy of layout coordinates
adjusted_layout <- layout_clustered
# Step 2: Identify unique groups and shift within-category nodes closer together
categories <- unique(V(g_avg)$group)
# Define a small offset for within-category nodes
offset <- 0.2
for (category in categories) {
# Get the indices of nodes in the current category
within_indices <- which(V(g_avg)$group == category)
# Calculate the centroid of the current group
centroid <- colMeans(adjusted_layout[within_indices, , drop = FALSE])
# Adjust each node within this category closer to the centroid
adjusted_layout[within_indices, ] <- adjusted_layout[within_indices, ] * (1 - offset) + centroid * offset
}
# Step 3: Plot the graph with manually adjusted layout
plot(g_avg, layout = adjusted_layout,
vertex.label.color = "black",
vertex.size = 20,
edge.width = 1,  # Keep edge width uniform for clarity
vertex.label.cex = 0.7,
edge.arrow.size = 0.3,
vertex.color = V(g_avg)$color)
